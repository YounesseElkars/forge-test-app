{"version":3,"file":"index.js","sources":["../../resources/icon.png?asset","../../src/main/index.ts"],"sourcesContent":["\n          import { join } from 'path'\n          export default join(__dirname, __VITE_NODE_PUBLIC_ASSET__6564bbc9__)","import { app, shell, BrowserWindow, ipcMain, WebContentsView, BaseWindow } from 'electron';\nimport { join } from 'path';\nimport { is } from '@electron-toolkit/utils';\nimport icon from '../../resources/icon.png?asset';\nimport { screen } from 'electron';\nimport path from 'path';\nconst { localStorage } = require('electron-browser-storage');\n\nprocess.env.VITE_PUBLIC = path.join(__dirname, '../renderer/public');\n\nlet win: BrowserWindow;\n\nfunction createWindow(): void {\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize;\n\n  win = new BrowserWindow({\n    width: width,\n    height: height,\n    frame: true,\n    fullscreen: false,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, '../preload/index.js'),\n      sandbox: false,\n      devTools: true,\n      nodeIntegration: true,\n    },\n  });\n\n  win.on('ready-to-show', async () => {\n    win?.show();\n    await localStorage.setItem('favorite_number', 12);\n  });\n\n  win.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url);\n    return { action: 'deny' };\n  });\n\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    win.loadURL(process.env['ELECTRON_RENDERER_URL']);\n  } else {\n    win.loadFile(join(__dirname, '../renderer/index.html'));\n  }\n}\n\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\nipcMain.on('open-base-window', () => {\n  const basewin = new BaseWindow({ width: 800, height: 600, parent: win, frame: false });\n\n  const leftView = new WebContentsView();\n  leftView.webContents.loadURL('https://electronjs.org');\n  basewin.contentView.addChildView(leftView);\n\n  const rightView = new WebContentsView();\n  rightView.webContents.loadURL('https://github.com/electron/electron');\n  basewin.contentView.addChildView(rightView);\n\n  leftView.setBounds({ x: 0, y: 0, width: 400, height: 600 });\n  rightView.setBounds({ x: 400, y: 0, width: 400, height: 600 });\n});\n"],"names":["join","screen","BrowserWindow","shell","is","app","ipcMain","BaseWindow","WebContentsView"],"mappings":";;;;;;;;;;;;AAEU,MAAA,OAAeA,KAAI,KAAC,WAAW,0BAAoC;ACI7E,MAAM,EAAE,aAAiB,IAAA,QAAQ,0BAA0B;AAE3D,QAAA,IAAY,cAAc,KAAK,KAAK,WAAW,oBAAoB;AAEnE,IAAI;AAEJ,SAAS,eAAqB;AAC5B,QAAM,EAAE,OAAO,OAAA,IAAWC,SAAAA,OAAO,kBAAoB,EAAA;AAErD,QAAM,IAAIC,SAAAA,cAAc;AAAA,IACtB;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,GAAI,QAAQ,aAAa,UAAU,EAAE,SAAS,CAAC;AAAA,IAC/C,gBAAgB;AAAA,MACd,SAASF,KAAAA,KAAK,WAAW,qBAAqB;AAAA,MAC9C,SAAS;AAAA,MACT,UAAU;AAAA,MACV,iBAAiB;AAAA,IACnB;AAAA,EAAA,CACD;AAEG,MAAA,GAAG,iBAAiB,YAAY;AAClC,SAAK,KAAK;AACJ,UAAA,aAAa,QAAQ,mBAAmB,EAAE;AAAA,EAAA,CACjD;AAEG,MAAA,YAAY,qBAAqB,CAAC,YAAY;AAC1CG,aAAAA,MAAA,aAAa,QAAQ,GAAG;AACvB,WAAA,EAAE,QAAQ;EAAO,CACzB;AAED,MAAIC,MAAG,GAAA,OAAO,QAAY,IAAA,uBAAuB,GAAG;AAC9C,QAAA,QAAQ,QAAY,IAAA,uBAAuB,CAAC;AAAA,EAAA,OAC3C;AACL,QAAI,SAASJ,KAAAA,KAAK,WAAW,wBAAwB,CAAC;AAAA,EACxD;AACF;AAEAK,SAAAA,IAAI,UAAA,EAAY,KAAK,MAAM;AACZ;AAETA,eAAA,GAAG,YAAY,WAAY;AAC7B,QAAIH,uBAAc,gBAAgB,WAAW,GAAG;AACjC;IACf;AAAA,EAAA,CACD;AACH,CAAC;AAEDI,SAAAA,QAAQ,GAAG,oBAAoB,MAAM;AACnC,QAAM,UAAU,IAAIC,SAAAA,WAAW,EAAE,OAAO,KAAK,QAAQ,KAAK,QAAQ,KAAK,OAAO,MAAO,CAAA;AAE/E,QAAA,WAAW,IAAIC,SAAAA;AACZ,WAAA,YAAY,QAAQ,wBAAwB;AAC7C,UAAA,YAAY,aAAa,QAAQ;AAEnC,QAAA,YAAY,IAAIA,SAAAA;AACZ,YAAA,YAAY,QAAQ,sCAAsC;AAC5D,UAAA,YAAY,aAAa,SAAS;AAEjC,WAAA,UAAU,EAAE,GAAG,GAAG,GAAG,GAAG,OAAO,KAAK,QAAQ,IAAK,CAAA;AAChD,YAAA,UAAU,EAAE,GAAG,KAAK,GAAG,GAAG,OAAO,KAAK,QAAQ,IAAK,CAAA;AAC/D,CAAC;"}